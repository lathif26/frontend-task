{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lathifa Thasneem\\\\OneDrive\\\\Desktop\\\\Frontend Task\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reddit = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetch('https://www.reddit.com/r/reactjs.json').then(res => res.json()).then(data => setPosts(data.data.children)).catch(console.log);\n  }, []);\n  const sanitizeHtml = html => {\n    const content = DOMPurify.sanitize(html);\n    if (content.startsWith('<ol>') || content.startsWith('<ul>')) {\n      return {\n        __html: content\n      };\n    } else {\n      return {\n        __html: `<p>${content}</p>`\n      };\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reddit-container\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reddit-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        dangerouslySetInnerHTML: sanitizeHtml(post.data.selftext_html)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: post.data.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reddit-score\",\n        children: post.data.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 11\n      }, this)]\n    }, post.data.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(Reddit, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = Reddit;\nexport default Reddit;\nvar _c;\n$RefreshReg$(_c, \"Reddit\");","map":{"version":3,"names":["React","useState","useEffect","DOMPurify","jsxDEV","_jsxDEV","Reddit","_s","posts","setPosts","fetch","then","res","json","data","children","catch","console","log","sanitizeHtml","html","content","sanitize","startsWith","__html","className","map","post","title","fileName","_jsxFileName","lineNumber","columnNumber","dangerouslySetInnerHTML","selftext_html","href","url","target","rel","score","id","_c","$RefreshReg$"],"sources":["C:/Users/Lathifa Thasneem/OneDrive/Desktop/Frontend Task/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DOMPurify from 'dompurify';\n\nconst Reddit = () => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetch('https://www.reddit.com/r/reactjs.json')\n      .then(res => res.json())\n      .then(data => setPosts(data.data.children))\n      .catch(console.log);\n  }, []);\n\n  const sanitizeHtml = html => {\n    const content = DOMPurify.sanitize(html);\n    if (content.startsWith('<ol>') || content.startsWith('<ul>')) {\n      return {\n        __html: content\n      };\n    } else {\n      return {\n        __html: `<p>${content}</p>`\n      };\n    }\n  };\n\n  return (\n    <div className=\"reddit-container\">\n      {posts.map(post => (\n        <div key={post.data.id} className=\"reddit-card\">\n          <h2>{post.data.title}</h2>\n          <div dangerouslySetInnerHTML={sanitizeHtml(post.data.selftext_html)} />\n          <a href={post.data.url} target=\"_blank\" rel=\"noopener noreferrer\">Read more</a>\n          <div className=\"reddit-score\">{post.data.score}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Reddit;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,SAAS,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAElC,MAAMC,MAAM,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACnB,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAEtCC,SAAS,CAAC,MAAM;IACdQ,KAAK,CAAC,uCAAuC,CAAC,CAC3CC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACC,IAAI,EAAE,CAAC,CACvBF,IAAI,CAACG,IAAI,IAAIL,QAAQ,CAACK,IAAI,CAACA,IAAI,CAACC,QAAQ,CAAC,CAAC,CAC1CC,KAAK,CAACC,OAAO,CAACC,GAAG,CAAC;EACvB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,YAAY,GAAGC,IAAI,IAAI;IAC3B,MAAMC,OAAO,GAAGlB,SAAS,CAACmB,QAAQ,CAACF,IAAI,CAAC;IACxC,IAAIC,OAAO,CAACE,UAAU,CAAC,MAAM,CAAC,IAAIF,OAAO,CAACE,UAAU,CAAC,MAAM,CAAC,EAAE;MAC5D,OAAO;QACLC,MAAM,EAAEH;MACV,CAAC;IACH,CAAC,MAAM;MACL,OAAO;QACLG,MAAM,EAAG,MAAKH,OAAQ;MACxB,CAAC;IACH;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKoB,SAAS,EAAC,kBAAkB;IAAAV,QAAA,EAC9BP,KAAK,CAACkB,GAAG,CAACC,IAAI,iBACbtB,OAAA;MAAwBoB,SAAS,EAAC,aAAa;MAAAV,QAAA,gBAC7CV,OAAA;QAAAU,QAAA,EAAKY,IAAI,CAACb,IAAI,CAACc;MAAK;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAM,eAC1B3B,OAAA;QAAK4B,uBAAuB,EAAEd,YAAY,CAACQ,IAAI,CAACb,IAAI,CAACoB,aAAa;MAAE;QAAAL,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAG,eACvE3B,OAAA;QAAG8B,IAAI,EAAER,IAAI,CAACb,IAAI,CAACsB,GAAI;QAACC,MAAM,EAAC,QAAQ;QAACC,GAAG,EAAC,qBAAqB;QAAAvB,QAAA,EAAC;MAAS;QAAAc,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAI,eAC/E3B,OAAA;QAAKoB,SAAS,EAAC,cAAc;QAAAV,QAAA,EAAEY,IAAI,CAACb,IAAI,CAACyB;MAAK;QAAAV,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,QAAO;IAAA,GAJ7CL,IAAI,CAACb,IAAI,CAAC0B,EAAE;MAAAX,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,QAMvB;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,QACE;AAEV,CAAC;AAACzB,EAAA,CAnCID,MAAM;AAAAmC,EAAA,GAANnC,MAAM;AAqCZ,eAAeA,MAAM;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}
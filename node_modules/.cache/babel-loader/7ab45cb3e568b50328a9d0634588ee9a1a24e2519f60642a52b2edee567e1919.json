{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Lathifa Thasneem\\\\OneDrive\\\\Desktop\\\\Frontend Task\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport DOMPurify from 'dompurify';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Reddit = () => {\n  _s();\n  const [posts, setPosts] = useState([]);\n  useEffect(() => {\n    fetch('https://www.reddit.com/r/reactjs.json').then(res => res.json()).then(data => setPosts(data.data.children)).catch(console.log);\n  }, []);\n  const sanitizeHtml = html => ({\n    __html: DOMPurify.sanitize(html)\n  });\n  const parseContent = content => {\n    const lines = content.split('\\n');\n    return lines.map((line, index) => {\n      if (line.startsWith('* ')) {\n        return /*#__PURE__*/_jsxDEV(\"li\", {\n          children: line.substring(2)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 16\n        }, this);\n      }\n      return /*#__PURE__*/_jsxDEV(\"p\", {\n        children: line\n      }, index, false, {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 14\n      }, this);\n    });\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"reddit-container\",\n    children: posts.map(post => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"reddit-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: post.data.title\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 32,\n        columnNumber: 11\n      }, this), post.data.selftext && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reddit-content\",\n        children: parseContent(post.data.selftext)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"a\", {\n        href: post.data.url,\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        children: \"Read more\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"reddit-score\",\n        children: post.data.score\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 11\n      }, this)]\n    }, post.data.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 5\n  }, this);\n};\n_s(Reddit, \"bG8V4duoIfO0BEPgauWMVT5Qvyw=\");\n_c = Reddit;\nexport default Reddit;\nvar _c;\n$RefreshReg$(_c, \"Reddit\");","map":{"version":3,"names":["React","useState","useEffect","DOMPurify","jsxDEV","_jsxDEV","Reddit","_s","posts","setPosts","fetch","then","res","json","data","children","catch","console","log","sanitizeHtml","html","__html","sanitize","parseContent","content","lines","split","map","line","index","startsWith","substring","fileName","_jsxFileName","lineNumber","columnNumber","className","post","title","selftext","href","url","target","rel","score","id","_c","$RefreshReg$"],"sources":["C:/Users/Lathifa Thasneem/OneDrive/Desktop/Frontend Task/my-app/src/App.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport DOMPurify from 'dompurify';\n\nconst Reddit = () => {\n  const [posts, setPosts] = useState([]);\n\n  useEffect(() => {\n    fetch('https://www.reddit.com/r/reactjs.json')\n      .then(res => res.json())\n      .then(data => setPosts(data.data.children))\n      .catch(console.log);\n  }, []);\n\n  const sanitizeHtml = html => ({\n    __html: DOMPurify.sanitize(html)\n  });\n\n  const parseContent = content => {\n    const lines = content.split('\\n');\n    return lines.map((line, index) => {\n      if (line.startsWith('* ')) {\n        return <li key={index}>{line.substring(2)}</li>;\n      }\n      return <p key={index}>{line}</p>;\n    });\n  };\n\n  return (\n    <div className=\"reddit-container\">\n      {posts.map(post => (\n        <div key={post.data.id} className=\"reddit-card\">\n          <h2>{post.data.title}</h2>\n          {post.data.selftext && (\n            <div className=\"reddit-content\">{parseContent(post.data.selftext)}</div>\n          )}\n          <a href={post.data.url} target=\"_blank\" rel=\"noopener noreferrer\">Read more</a>\n          <div className=\"reddit-score\">{post.data.score}</div>\n        </div>\n      ))}\n    </div>\n  );\n};\n\nexport default Reddit;\n\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}